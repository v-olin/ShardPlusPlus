#pragma once
#include <glm.hpp>
#include <vector>
#include <Model.h>
#include <omp.h>
#include "TextureManager.h"
#include "HDRImage.h"

#ifdef M_PI
#undef M_PI
#endif
#define M_PI 3.14159265359f
#define EPSILON 0.0001f




using namespace glm;

namespace Shard
{
namespace PathTracer
{
///////////////////////////////////////////////////////////////////////////////
// Path Tracer settings
///////////////////////////////////////////////////////////////////////////////
extern struct Settings
{
	int subsampling;
	int max_bounces;
	int max_paths_per_pixel;
};
extern Settings settings;

///////////////////////////////////////////////////////////////////////////////
// Environment
///////////////////////////////////////////////////////////////////////////////
extern struct Environment
{
	float multiplier;
	HDRImage map;
};
extern Environment environment;

///////////////////////////////////////////////////////////////////////////
// The rendered image
///////////////////////////////////////////////////////////////////////////
extern struct Image
{
	int width, height, number_of_samples = 0;
	std::vector<glm::vec3> data;
	float* getPtr()
	{
		return &data[0].x;
	}
};
extern Image rendered_image;

///////////////////////////////////////////////////////////////////////////////
// The light sources
///////////////////////////////////////////////////////////////////////////////
struct PointLight
{
	float intensity_multiplier;
	vec3 color;
	vec3 position;
};
extern PointLight point_light;

struct DiscLight
{
	float intensity_multiplier;
	vec3 color;
	vec3 position;
	vec3 direction;
	float radius;
};
extern std::vector<DiscLight> disc_lights;

///////////////////////////////////////////////////////////////////////////
/// Restart rendering of image
///////////////////////////////////////////////////////////////////////////
void restart();

///////////////////////////////////////////////////////////////////////////
/// Get the amount of samples taken in the current image
///////////////////////////////////////////////////////////////////////////
int getSampleCount();

///////////////////////////////////////////////////////////////////////////
/// On window resize, window size is passed in, actual size of pathtraced
/// image may be smaller (if we're subsampling for speed)
///////////////////////////////////////////////////////////////////////////
void resize(int w, int h);

///////////////////////////////////////////////////////////////////////////
/// Trace one path per pixel
///////////////////////////////////////////////////////////////////////////
void tracePaths(const mat4& V, const mat4& P);
}; // namespace PathTracer
}; // namespace Shard
